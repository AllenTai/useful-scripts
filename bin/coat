#!/usr/bin/env bash
# @Function
# cat lines colorfully. coat means *CO*lorful c*AT*.
#
# @Usage
#   $ echo -e 'Hello\nWorld' | coat
#   $ coat /path/to/file1
#   $ coat /path/to/file1 /path/to/file2
#
# @online-doc https://github.com/oldratlee/useful-scripts/blob/dev-2.x/docs/shell.md#-coat
# @author Jerry Lee (oldratlee at gmail dot com)
set -eEuo pipefail

# if stdout is not a terminal, use `cat` directly.
#   '-t' check: is a terminal?
#   check isatty in bash https://stackoverflow.com/questions/10022323
[ -t 1 ] || exec cat "$@"

readonly -a ROTATE_COLORS=(33 35 36 31 32 37 34)
COUNT=0
# CAUTION: print content WITHOUT new line
rotateColorPrint() {
  local content=$*
  # skip color for white space
  if [[ $content =~ ^[[:space:]]*$ ]]; then
    printf %s "$content"
  else
    local color=${ROTATE_COLORS[COUNT++ % ${#ROTATE_COLORS[@]}]}
    printf '\e[1;%sm%s\e[0m' "$color" "$content"
  fi
}

rotateColorPrintln() {
  rotateColorPrint "$*"$'\n'
}

colorLines() {
  local line
  # Bash read line does not read leading spaces
  # https://stackoverflow.com/questions/29689172
  while IFS= read -r line; do
    rotateColorPrintln "$line"
  done
  # How to use `while read` (Bash) to read the last line in a file
  #   if thereâ€™s no newline at the end of the file?
  # https://stackoverflow.com/questions/4165135
  [ -z "$line" ] || rotateColorPrint "$line"
}

if [ $# == 0 ]; then
  colorLines
else
  cat "$@" | colorLines
fi
